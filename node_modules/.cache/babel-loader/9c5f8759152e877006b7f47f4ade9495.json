{"ast":null,"code":"var _jsxFileName = \"/home/joao_pedro/Documents/Projects/Thinking-In-React/src/components/FilterableProductTable/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport { ProductTable } from \"../ProductTable\";\nimport { SearchBar } from \"../SearchBar\";\nimport { Container } from \"./style\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FilterableProductTable = _ref => {\n  _s();\n\n  let {\n    mockDataBase\n  } = _ref;\n  const [inputFromUser, setInputFromUser] = useState(\"\");\n  const [onlyProductInStock, setOnlyProductInStock] = useState(false);\n  const [sportingsGoodsValue, setSportingsGoodsValue] = useState(mockDataBase);\n  const [electronicsValue, setElectronicsValue] = useState(mockDataBase);\n  const IS_SPORTING_GOODS = \"Sporting Goods\";\n  const IS_ELECTRONICS = \"Electronics\";\n  const handleChange = useCallback(inputFromUser => {\n    const response = mockDataBase.filter(data => data.name.indexOf(inputFromUser) !== -1);\n    setSportingsGoodsValue(response.filter(data => data.category === IS_SPORTING_GOODS));\n    setElectronicsValue(response.filter(data => data.category === IS_ELECTRONICS));\n\n    if (onlyProductInStock) {\n      setSportingsGoodsValue(sportingsGoodsValue.filter(data => data.stocked === onlyProductInStock));\n      setElectronicsValue(electronicsValue.filter(data => data.stocked === onlyProductInStock));\n    }\n  }, [electronicsValue, mockDataBase, onlyProductInStock, sportingsGoodsValue]);\n  const setIsSportingsGoods = useCallback(() => {\n    const response = mockDataBase.filter(data => data.category === IS_SPORTING_GOODS);\n\n    if (onlyProductInStock) {\n      setSportingsGoodsValue(response.filter(data => data.stocked === onlyProductInStock));\n      return;\n    }\n\n    setSportingsGoodsValue(response);\n  }, [mockDataBase, onlyProductInStock]);\n  const setIsElectronics = useCallback(() => {\n    const response = mockDataBase.filter(data => data.category === IS_ELECTRONICS);\n\n    if (onlyProductInStock) {\n      setElectronicsValue(response.filter(data => data.stocked === onlyProductInStock));\n      return;\n    }\n\n    setElectronicsValue(response);\n  }, [mockDataBase, onlyProductInStock]);\n  useEffect(() => {\n    if (inputFromUser) {\n      handleChange(inputFromUser);\n      return;\n    }\n  }, [handleChange, inputFromUser, setIsElectronics, setIsSportingsGoods]);\n  useEffect(() => {\n    setIsSportingsGoods();\n    setIsElectronics();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      onchangeInputText: value => setInputFromUser(value),\n      onchangeCheckBox: () => setOnlyProductInStock(onlyProductInStock ? false : true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProductTable, {\n      electronics: electronicsValue,\n      sportingGoods: sportingsGoodsValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FilterableProductTable, \"irqv/2AbzksZbRWne0B2uJXWRBo=\");\n\n_c = FilterableProductTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterableProductTable\");","map":{"version":3,"names":["useState","useEffect","useCallback","ProductTable","SearchBar","Container","FilterableProductTable","mockDataBase","inputFromUser","setInputFromUser","onlyProductInStock","setOnlyProductInStock","sportingsGoodsValue","setSportingsGoodsValue","electronicsValue","setElectronicsValue","IS_SPORTING_GOODS","IS_ELECTRONICS","handleChange","response","filter","data","name","indexOf","category","stocked","setIsSportingsGoods","setIsElectronics","value"],"sources":["/home/joao_pedro/Documents/Projects/Thinking-In-React/src/components/FilterableProductTable/index.tsx"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { ProductTable } from \"../ProductTable\";\nimport { SearchBar } from \"../SearchBar\";\n\nimport { Container } from \"./style\";\n\nexport interface ProductTableType {\n  category: string;\n  price: string;\n  stocked: boolean;\n  name: string;\n}\n\nexport interface ProductTableProps {\n  mockDataBase: ProductTableType[];\n}\n\nexport const FilterableProductTable = ({ mockDataBase }: ProductTableProps) => {\n  const [inputFromUser, setInputFromUser] = useState(\"\");\n  const [onlyProductInStock, setOnlyProductInStock] = useState(false);\n  const [sportingsGoodsValue, setSportingsGoodsValue] = useState(mockDataBase);\n  const [electronicsValue, setElectronicsValue] = useState(mockDataBase);\n\n  const IS_SPORTING_GOODS = \"Sporting Goods\";\n  const IS_ELECTRONICS = \"Electronics\";\n\n  const handleChange = useCallback(\n    (inputFromUser: string) => {\n      const response = mockDataBase.filter(\n        (data) => data.name.indexOf(inputFromUser) !== -1\n      );\n      setSportingsGoodsValue(\n        response.filter((data) => data.category === IS_SPORTING_GOODS)\n      );\n      setElectronicsValue(\n        response.filter((data) => data.category === IS_ELECTRONICS)\n      );\n      if (onlyProductInStock) {\n        setSportingsGoodsValue(\n          sportingsGoodsValue.filter(\n            (data) => data.stocked === onlyProductInStock\n          )\n        );\n        setElectronicsValue(\n          electronicsValue.filter((data) => data.stocked === onlyProductInStock)\n        );\n      }\n    },\n    [electronicsValue, mockDataBase, onlyProductInStock, sportingsGoodsValue]\n  );\n\n  const setIsSportingsGoods = useCallback(() => {\n    const response = mockDataBase.filter(\n      (data) => data.category === IS_SPORTING_GOODS\n    );\n    if (onlyProductInStock) {\n      setSportingsGoodsValue(\n        response.filter((data) => data.stocked === onlyProductInStock)\n      );\n      return;\n    }\n\n    setSportingsGoodsValue(response);\n  }, [mockDataBase, onlyProductInStock]);\n\n  const setIsElectronics = useCallback(() => {\n    const response = mockDataBase.filter(\n      (data) => data.category === IS_ELECTRONICS\n    );\n    if (onlyProductInStock) {\n      setElectronicsValue(\n        response.filter((data) => data.stocked === onlyProductInStock)\n      );\n      return;\n    }\n    setElectronicsValue(response);\n  }, [mockDataBase, onlyProductInStock]);\n\n  useEffect(() => {\n    if (inputFromUser) {\n      handleChange(inputFromUser);\n      return;\n    }\n  }, [handleChange, inputFromUser, setIsElectronics, setIsSportingsGoods]);\n  useEffect(() => {\n    setIsSportingsGoods();\n    setIsElectronics();\n  }, []);\n\n  return (\n    <Container>\n      <SearchBar\n        onchangeInputText={(value) => setInputFromUser(value)}\n        onchangeCheckBox={() =>\n          setOnlyProductInStock(onlyProductInStock ? false : true)\n        }\n      />\n      <ProductTable\n        electronics={electronicsValue}\n        sportingGoods={sportingsGoodsValue}\n      />\n    </Container>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}